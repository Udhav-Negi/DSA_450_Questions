class Node{
    public:
    int data, i, j;
};

class compare
{
    public:
    bool operator() (Node a, Node b)
    {
        return a.data > b.data;
    }
};

class Solution
{
    public:
    vector<int> mergeKArrays(vector<vector<int>> arr, int k)
    {
        vector<int> ans;
        priority_queue<Node, vector<Node>, compare> pq;
        
        for(int i=0; i<k; i++)
        {
            Node a;
            a.data = arr[i][0];
            a.i = i;
            a.j = 0;
            pq.push(a);
        }
        
        while(!pq.empty())
        {
            Node node = pq.top();
            pq.pop();
            
            ans.push_back(node.data);
            
            int j = node.j;
            int i = node.i;
            
            Node temp;
            if(j+1 < k)
            {
                temp.data = arr[i][j+1];
                temp.i = i;
                temp.j = j+1;
                
                pq.push(temp);
            }
      }
        
        return ans;
    }
};