void leftSmallElement(long long *left, int arr[], long long n)
    {
        stack<long long> st;
        st.push(-1);
        
        for(long long i=0; i<n; i++)
        {
            while(st.top() != -1 && arr[st.top()] >= arr[i])
            {
                st.pop();
            }
            
            left[i] = st.top();
            st.push(i);
        }
    }
    
    void rightSmallElement(long long *right, int arr[], long long n)
    {
        stack<long long> st;
        st.push(-1);
        for(long long i=n-1; i>=0; i--)
        {
            while(st.top() != -1 && arr[st.top()] >= arr[i])
            {
                st.pop();
            }

            right[i] = st.top();
            st.push(i);
        }
    }
    long long getMaxArea(int arr[], int n)
    {
        long long* left = new long long[n];
        long long* right = new long long[n];
        leftSmallElement(left, arr, n);
        rightSmallElement(right, arr, n);
        long long ans = 0;
        long long curr;
        for(int i=0; i<n; i++)
        {
            int l = arr[i];
            if(right[i] == -1)
            right[i] = n;
            curr = l* (right[i] - left[i] - 1);
            ans = max(ans, curr);
        }
        return ans;
    }
    
    int maxArea(int arr[MAX][MAX], int n, int m) {
        int ans = 0, curr;
        
        curr = getMaxArea(arr[0], m);
        ans = max(ans, curr);
        
        for(int i=1; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(arr[i][j] == 1)
                {
                    arr[i][j] = arr[i][j] + arr[i-1][j];
                }
                
            }
            
            
            curr = getMaxArea(arr[i], m);
            ans = max(ans, curr);
        }
        
        ans = max(ans, curr);
        return ans;
    }