vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    int n = grid.size();
	    int m = grid[0].size();
	    vector<vector<int>> ans(n);
	    queue<pair<int, int>> q;
	    
	    for(int i=0; i<n; i++)
	    {
	        for(int j=0; j<m; j++)
	        {
	            ans[i].push_back(-1);
	            if(grid[i][j] == 1)
	            {
	                ans[i][j] = 0;
	                q.push({i, j});
	            }
	        }
	    }
	    
	    while(!q.empty())
	    {
	        int i = q.front().first;
	        int j = q.front().second;
	        q.pop();
	        
	        if(i+1 < n && ans[i+1][j] < 0)
	        {
	            ans[i+1][j] = 1 + ans[i][j];
	            q.push({i+1, j});
	        }
	        
	        if(i-1 >= 0 && ans[i-1][j] < 0)
	        {
	            ans[i-1][j] = 1 + ans[i][j];
	            q.push({i-1, j});
	        }
	        
	        if(j+1 < m && ans[i][j+1] < 0)
	        {
	            ans[i][j+1] = 1 + ans[i][j];
	            q.push({i, j+1});
	        }
	        
	        if(j-1 >= 0 && ans[i][j-1] < 0)
	        {
	            ans[i][j-1] = 1 + ans[i][j];
	            q.push({i, j-1});
	        }
	    }
	    return ans;
	}