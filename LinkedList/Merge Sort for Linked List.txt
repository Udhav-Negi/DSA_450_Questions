Node* findMiddle(Node* head)
    {
        Node* slow = head;
        Node* fast = head->next;
        
        while(fast && fast->next)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        return slow;
    }
    Node* merge(Node* left, Node* right)
    {
        Node* ans = new Node(-1);
        Node* head = ans;
        
        while(left && right)
        {
            if(left->data <= right->data )
            {
                ans->next = new Node(left->data);
                left = left->next;
                ans = ans->next;
            }
            
            else 
            {
                ans->next = new Node(right->data);
                right = right->next;
                ans = ans->next;
            }
        }
        
        while(left)
        {
            ans->next = new Node(left->data);
            left = left->next;
            ans = ans->next;
        }
        
        while(right)
        {
            ans->next = new Node(right->data);
            right = right->next;
            ans = ans->next;
        }
        
        return head->next;
    }
    Node* mergeSort(Node* head) {
        if(!head || !(head->next))
        {
            return head;
        }
        
        Node* mid = findMiddle(head);
        
        Node* left = head;
        Node* right = mid->next;
        mid->next = NULL;
        
        left = mergeSort(left);
        right = mergeSort(right);
        
        return merge(left, right);
    }