    int firstPos(vector<int> arr, int tar)
    {
        int s = 0;
        int e = arr.size()-1;
        int index = -1;
        int mid = s + (e-s)/2;
        while(s <= e)
        {
            if(arr[mid] == tar)
            {
                index = mid;
                e = mid-1;
            }
            
            else if(tar > arr[mid])
            {
                s = mid+1;
            }
            else
            {
                e = mid;
            }
            mid = s + (e-s)/2;
        }
        return index;
    }
    
    int lastPos(vector<int> arr, int tar)
    {
        int s = 0;
        int e = arr.size()-1;
        int index = -1;
        int mid = s + (e-s)/2;
        while(s <= e)
        {
            if(arr[mid] == tar)
            {
                index = mid;
                s = mid+1;
            }
            
            else if(tar > arr[mid])
            {
                s = mid+1;
            }
            else
            {
                e = mid;
            }
            mid = s + (e-s)/2;
        }
        return index;
    }
	int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
     int ans = 0, index = -1;
	 for(int i=0; i<n; i++)
	 {
	     int first_pos = firstPos(arr[i], 1);
	     if(first_pos != -1)
	     {
	         int last_pos = lastPos(arr[i], 1);
	         int curr = last_pos - first_pos + 1;
	         if(curr > ans)
	         {
	             ans = curr;
	             index = i;
	         }
	     }
	 }
	 return index;
	 
	}