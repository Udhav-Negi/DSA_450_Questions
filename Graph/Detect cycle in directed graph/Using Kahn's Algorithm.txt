int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  unordered_map<int, vector<int>> adj;
  queue<int> q;
  vector<int> indegree(n+1, 0);

  for(int i=0; i<edges.size(); i++)
  {
    int u = edges[i].first;
    int v = edges[i].second;;
    indegree[v]++;
    adj[u].push_back(v);
  }

  for(int i=1; i<=n; i++)
  {
    if(indegree[i] == 0)
    {
      q.push(i);
    }
  }

  int count = 0;

  while(!q.empty())
  {
    int front = q.front();
    q.pop();
    count++;

    for(auto i : adj[front])
    {
      indegree[i]--;
      if(indegree[i] == 0)
      q.push(i);
    }
  }

  return count != n;
}