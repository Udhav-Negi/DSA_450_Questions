void dfs(int node, map<int, bool> &visited, map<int, vector<int>> &adj, vector<int> & component)
{
    component.push_back(node);
    visited[node] = true;

    for(auto i : adj[node])
    {
        if(!visited[i])
        dfs(i, visited, adj, component);
    }
}
vector<vector<int>> depthFirstSearch(int v, int e, vector<vector<int>> &edges)
{
    map<int, bool> visited;
    map<int, vector<int>> adj;
    vector<vector<int>> ans;

    for(int i=0; i<v; i++)
    {
        visited[i] = false;
    }
    for(int  i=0; i<edges.size(); i++)
    {
        int u = edges[i][0];
        int v = edges[i][1];
        
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    for(auto i : adj)
    // for(int i=0; i<v; i++)
    {
        if(!visited[i.first])
        // if(!visited[i])
        {
            vector<int> component;

            dfs(i.first, visited, adj, component);
            ans.push_back(component);
        }
    }

    return ans;
}