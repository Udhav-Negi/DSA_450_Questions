bool isCycleBfs(int node, map<int, int> &visited, vector<int> adj[])
    {
        visited[node] = true;
        map<int, int> parent;
        parent[node] = -1;
        queue<int> q;
        q.push(node);
        
        while(!q.empty())
        {
            int node = q.front();
            q.pop();
            
            for(auto neighbour : adj[node])
            {
                if(!visited[neighbour])
                {
                    visited[neighbour] = true;
                    q.push(neighbour);
                    parent[neighbour] = node;
                }
                
                else if(visited[neighbour] && neighbour != parent[node])
                return true;
            }
        }
        
        return false;
    }
    bool isCycle(int v, vector<int> adj[]) {
        map<int, int> visited;
        for(int i=0; i<v; i++)
        {
            visited[i] = false;
        }
        for(int i=0; i<v; i++)
        {
            if(!visited[i])
            {
                bool ans = isCycleBfs(i, visited, adj);
                if(ans)
                return true;
            }
        }
        return false;
    }