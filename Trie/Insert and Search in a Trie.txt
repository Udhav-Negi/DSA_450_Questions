void insertUtil(TrieNode* root, string word)
        {
            if(word.length() == 0)
            {
                root->isLeaf = true;
                return;
            }
            
            int index = word[0] - 'a';
            TrieNode* child;
            
            if(root->children[index] == NULL)
            {
                root->children[index] = getNode();
                child = root->children[index];
            }
            else 
            {
                child = root -> children[index];
            }
            
            insertUtil(child, word.substr(1));
            
        }
        void insert(struct TrieNode *root, string key)
        {
            insertUtil(root, key);
        }
        
        //Function to use TRIE data structure and search the given string.
        bool searchUtil(TrieNode* root, string word)
        {
            if(word.length() == 0)
            {
                return root->isLeaf;
            }
            
            int index = word[0] - 'a';
            TrieNode* child;
            
            if(root->children[index] == NULL)
            {
                return false;
            }
            else 
            {
                child = root -> children[index];
            }
            
            return searchUtil(child, word.substr(1));
        }
        bool search(struct TrieNode *root, string key) 
        {
            return searchUtil(root, key);
        }
// This is trie data structure